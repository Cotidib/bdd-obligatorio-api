version: '3.4'

services:
  database:
    #Pull the latest mysql image
    image: mysql:latest
    #Map port 3306 on the mysql container to port 3306 in the host
    ports:
      - "3306:3306"
    #Specify where the persisted Data should be stored
    volumes:
      - datafiles:/var/lib/mysql
      #Corre script sql de inicializacion. Corre una sola vez cuando se inicializa sql y se crea el volumen
      #Si se hacen cambios en el archivo init-db, borrar el contenedor y su volumen desde docker desktop y levantar todo de nuevo
      - "./sql-scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql"
    #Specify Environment Variables for mysql
    environment: 
      MYSQL_ROOT_PASSWORD: root
      MYSQL_USER: ${DBUSER}
      MYSQL_PASSWORD: ${DBPASSWORD}
      MYSQL_DATABASE: ${DB}
  bdd-obligatorio-cron:
    image: ${DOCKER_REGISTRY-}bddobligatoriocronjob
    build:
      context: ./bdd-obligatorio-cronjob
      dockerfile: Dockerfile
    #This Service Depends on the database service specifed above
    depends_on: 
        - database
    environment: 
      DBHOST: ${DBHOST}
      DBUSER: ${DBUSER}
      DBPASSWORD: ${DBPASSWORD}
      DB: ${DB}
      SSL_PORT: ${SSL_PORT}
      SMTP_SERVER: ${SMTP_SERVER}
      SENDER_EMAIL: ${SENDER_EMAIL}
      SENDER_PWD: ${SENDER_PWD}
  bdd-obligatorio-api:
    image: ${DOCKER_REGISTRY-}bddobligatorioapi
    build:
      context: .
      dockerfile: bdd-obligatorio-api/Dockerfile
    #This Service Depends on the database service specifed above
    depends_on: 
        - database
    #Map port 8888 in the docker container to port 80 in the Api
    ports:
      - "5000:80"
    #Specify Environment Variables for the Api Service
    environment: 
      - DBHOST=database
  bdd-front:
    build:
      context: front-ucusalud
      target: builder
    ports:
      - 4200:4200
volumes:
    datafiles:
